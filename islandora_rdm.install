<?php

/**
 * @file
 * To test the services that Islandora uses.
 */

use Drupal\Core\Site\Settings;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\Entity\Term;
use GuzzleHttp\Exception\ClientException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_requirements().
 */
function islandora_rdm_requirements($phase) {
  $requirements = [];
  if ($phase == 'runtime') {
    $requirements += check_fedora_service();
    $requirements += check_bigdata_service();
  }
  return $requirements;
}

/**
 * A function to check the Fedora service.
 */
function check_fedora_service() {
  $array = [];
  $message = "";
  $settings_flysystem = settings::get('flysystem', '');
  $fedora_server_URL = $settings_flysystem['fedora']['config']['root'];

  // Make an HTTP request; Get the client service class.
  $client = \Drupal::httpClient();
  try {
    $request = $client->get($fedora_server_URL);
    $message = "Working well";
    $array = [
      'fedora_server_check' => [
        'title' => t('Fedora Server'),
        'value' => $message,
        'severity' => REQUIREMENT_OK,
      ],
    ];
  }
  catch (ClientException $e1) {
    $e_response = (string) $e1->getCode();
    if ($e_response == "404") {
      $message = "Server not found";
      $array = [
        'fedora_server_check' => [
          'title' => t('Fedora Server'),
          'value' => $message,
          'description' => $e1->getMessage(),
          'severity' => REQUIREMENT_ERROR,
        ],
      ];
    }
  }
  catch (ConnectException $e2) {
    $message = "Connection refused";
    $array = [
      'fedora_server_check' => [
        'title' => t('Fedora Server'),
        'value' => $message,
        'description' => $e2->getMessage(),
        'severity' => REQUIREMENT_ERROR,
      ],
    ];
  }
  return $array;
}

/**
 * A function to check the big data query service.
 */
function check_bigdata_service() {
  $array = [];
  try {
    $all_count = 'SELECT (COUNT(?s) AS ?triples) WHERE { ?s ?p ?o }';
    $sparql_service = \Drupal::service('islandora_rdm.sparqlqueryrunner');
    // Get count of all triples.
    $results = $sparql_service->getQueryResults($all_count);
    $message = $results[0]->triples->value;

    $array = [
      'bigdata_check' => [
        'title' => t('Big Data'),
        'value' => 'COUNT Query returned ' . $message . ' results',
        'severity' => REQUIREMENT_OK,
      ],
    ];
    return $array;
  }
  catch (RequestException $e3) {
    $array = [
      'bigdata_check' => [
        'title' => t('Big Data'),
        'value' => 'Unavailable',
        'description' => $e3->getMessage(),
        'severity' => REQUIREMENT_ERROR,
      ],
    ];
    return $array;
  }

}


/**
 * Implements hook_install().
 */
function islandora_rdm_install() {
  $views = ['solr_search_content'];
  foreach ($views as $candidate) {
    $view = \Drupal::service('entity.manager')->getStorage('view')->load($candidate);
    if (!is_null($view)) {
      $view->setStatus(FALSE);
      $view->save();
    }
  }
  // Add extensions if they doesn't already exist.
  $field = FieldConfig::load("media.file.field_media_file");
  $fieldSettings = $field->getSettings();
  $extensions = $fieldSettings['file_extensions'];
  $candidates = ['csv', 'tsv', 'zip'];
  $count = 0;
  foreach ($candidates as $candidate) {
    if (!strpos($extensions, $candidate)) {
      $fieldSettings['file_extensions'] .= " $candidate";
      $count++;
    }
  }
  if ($count) {
    $field->set('settings', $fieldSettings);
    $field->save();
  }
}

